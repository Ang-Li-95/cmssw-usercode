# https://hypernews.cern.ch/HyperNews/CMS/get/physics-validation/3007.html
# Bug in npu distribution for official MC samples, one is advised to
# check per-sample. Few % difference especially wrt peak at 0 and
# extra at 75-100, so should apply per-sample weights.
#
# This is fixed for some samples with PU2017 in dataset name, list of
# liars is in Samples.py. Each unfixed sample should have a separate
# entry in each of the dicts below.

pileup_weights = {
    2017: [ 0.184739, 3.87862, 3.43873, 2.55711, 1.66222, 1.50921, 1.28595, 1.25693, 0.615431, 1.45522, 1.4954, 1.48321, 1.33156, 1.16429, 1.07819, 1.05333, 1.08185, 1.1281, 1.16611, 1.18882, 1.2123, 1.23819, 1.26049, 1.27054, 1.27151, 1.27133, 1.27212, 1.26675, 1.27518, 1.25199, 1.22257, 1.16871, 1.10992, 1.03781, 0.968667, 0.911656, 0.867131, 0.834894, 0.787916, 0.750576, 0.758612, 0.79302, 0.859323, 0.959067, 1.09514, 1.25685, 1.41972, 1.49691, 1.52938, 1.46324, 1.33617, 1.15483, 0.950685, 0.749146, 0.569927, 0.411027, 0.28984, 0.198626, 0.13758, 0.0964932, 0.0693175, 0.0508504, 0.038385, 0.0299888, 0.0240799, 0.0170695, 0.0124844, 0.0107651, 0.00962124, 0.00879133, 0.00826726, 0.00803058, 0.00783523, 0.00781574, 0.00631688, 0.00535918, 0.00553274, 0.00551791, 0.00589565, 0.00594138, 0.00625883, 0.00628165, 0.00635429, 0.00491238, 0.00435898, 0.00445464, 0.00438023, 0.00456194, 0.00393917, 0.00424369, 0.00310455, 0.00284123, 0.00176242, 0.00148484, 0.00316881, 0.00199287, ],
    2018: [1.]*200, # no 2018 default because we do not run on 2018 MC yet
    'mfv_signals': [ 0.172534, 3.13262, 2.68262, 2.33918, 1.49582, 1.75664, 1.45234, 1.27364, 0.585358, 1.49517, 1.45961, 1.44424, 1.30702, 1.18514, 1.07074, 1.03629, 1.09412, 1.10414, 1.16949, 1.20394, 1.21806, 1.23341, 1.25095, 1.27037, 1.29025, 1.25948, 1.27016, 1.25865, 1.27388, 1.24479, 1.23516, 1.16681, 1.09766, 1.04073, 0.973876, 0.917616, 0.869108, 0.840266, 0.782769, 0.745708, 0.755959, 0.788542, 0.849645, 0.941173, 1.08525, 1.24145, 1.44664, 1.4887, 1.51809, 1.48096, 1.33463, 1.17911, 0.96439, 0.752935, 0.578032, 0.4134, 0.289109, 0.200918, 0.137729, 0.0965137, 0.0699985, 0.0523641, 0.0376583, 0.0297392, 0.0241064, 0.0175732, 0.0125353, 0.0112112, 0.00906686, 0.00889159, 0.0083708, 0.00838739, 0.00782759, 0.00836096, 0.00607675, 0.00541676, 0.005148, 0.00664222, 0.00790963, 0.010092, 0.00668878, 0.00330788, 0.00693948, 0.00565068, 0, 0, 0.000997499, 0.00378327, ],

    'dyjetstollM10_2017': [ 0.000229715, 0.0300705, 0.0319789, 0.0513375, 0.0645684, 0.0908925, 0.111439, 0.152398, 0.113217, 0.293476, 0.422177, 0.582436, 0.640371, 0.690106, 0.727615, 0.794766, 0.89434, 1.02119, 1.09519, 1.15135, 1.21878, 1.26489, 1.30698, 1.34089, 1.35737, 1.36461, 1.37045, 1.37881, 1.38058, 1.36934, 1.33137, 1.27088, 1.20882, 1.14316, 1.06399, 1.00359, 0.9567, 0.913202, 0.865897, 0.824827, 0.829919, 0.870158, 0.949461, 1.05575, 1.18556, 1.36366, 1.54705, 1.58819, 1.63285, 1.58153, 1.41758, 1.22361, 1.01485, 0.789125, 0.602011, 0.429304, 0.309488, 0.211026, 0.146795, 0.102502, 0.0742253, 0.0544275, 0.0400743, 0.0313479, 0.0239129, 0.01804, 0.0123402, 0.0108551, 0.00965488, 0.00880901, 0.0073491, 0.00610756, 0.00605802, 0.00574327, 0.00327484, 0.00321835, 0.00227254, 0.00145935, 0.00157055, 0.000437929, 0.000252333, 0.00028131, 0.000244326, 7.39277e-05, 0.00031638, 7.16363e-05, 6.65681e-05, 1.94714e-05, 2.32228e-05, 1.26017e-05, 5.71133e-05, 1.03919e-05, 8.81662e-06, 2.44195e-06, 2.40042e-06, 5.7742e-07, 1.75046e-05, 4.00919e-06, 2.20699e-05, 3.29462e-07, 5.72512e-05, 0, 2.30248e-05, 0, 1.99777e-05, 0, 0, 2.86971e-06, 0, 7.46115e-07, 0, 0, 0, 0, 0, 0, 0, 0, 1.0162e-09, 0, 2.07865e-10, 0, 2.0365e-11, 8.83521e-12, 7.60851e-12, ],
    'dyjetstollM50_2017': [ 0.000343766, 0.0454942, 0.0638485, 0.0724603, 0.0808402, 0.11692, 0.120572, 0.159041, 0.116146, 0.37076, 0.494838, 0.657513, 0.700729, 0.708831, 0.744099, 0.804827, 0.910911, 1.00248, 1.08458, 1.13475, 1.19334, 1.24291, 1.29376, 1.32784, 1.33288, 1.34342, 1.3393, 1.34805, 1.3628, 1.34461, 1.30984, 1.25493, 1.18706, 1.12607, 1.04982, 0.990498, 0.944446, 0.897164, 0.852112, 0.816464, 0.816095, 0.854148, 0.92026, 1.03886, 1.19119, 1.35243, 1.51488, 1.59998, 1.61957, 1.54753, 1.39156, 1.20325, 0.994411, 0.788659, 0.596926, 0.421187, 0.301209, 0.209862, 0.145994, 0.102151, 0.0732009, 0.0534267, 0.0402743, 0.0302724, 0.0243304, 0.0174366, 0.0126443, 0.0107361, 0.00966023, 0.00909761, 0.00781418, 0.00715103, 0.00514489, 0.00508311, 0.00287266, 0.0036989, 0.00243739, 0.0018937, 0.000968539, 0.000656432, 0.000186763, 0.000336561, 0.000303331, 0.000105614, 7.70877e-05, 4.73415e-05, 8.20535e-05, 1.33613e-05, 1.17325e-05, 7.87561e-06, 2.4555e-05, 1.0153e-05, 1.24211e-05, 1.34593e-05, 1.33355e-06, 8.47843e-07, 1.60305e-06, 7.96342e-07, 1.06406e-06, 2.8214e-07, 9.40161e-05, 0, 4.25369e-05, 0, 2.4605e-05, 1.3024e-05, 0, 3.53441e-06, 0, 9.18935e-07, 4.61057e-07, 2.28839e-07, 0, 0, 0, 0, 5.85534e-09, 0, 0, 5.69144e-10, 0, 0, 0, 7.25444e-12, 0, 0, 0, 0, 0, 7.89499e-14, ],
    'dyjetstollM50ext_2017': [ 0.000284296, 0.0441341, 0.048311, 0.0643351, 0.0658194, 0.114021, 0.133082, 0.175306, 0.115663, 0.369264, 0.490677, 0.634555, 0.695788, 0.717745, 0.737257, 0.818224, 0.890208, 1.00881, 1.08936, 1.14807, 1.21153, 1.25518, 1.29829, 1.33017, 1.33314, 1.35532, 1.35278, 1.3581, 1.36822, 1.35198, 1.32441, 1.26484, 1.19439, 1.12787, 1.05852, 0.993088, 0.947668, 0.914562, 0.861042, 0.818735, 0.816466, 0.858118, 0.933036, 1.04665, 1.19173, 1.35124, 1.53126, 1.5808, 1.63146, 1.56586, 1.36686, 1.22517, 1.00695, 0.777073, 0.597204, 0.430277, 0.301055, 0.210501, 0.145842, 0.10178, 0.0713765, 0.0530337, 0.0405464, 0.0307925, 0.0238372, 0.017541, 0.012578, 0.0103144, 0.0100839, 0.00841939, 0.00778395, 0.00525509, 0.00630739, 0.00574322, 0.00276802, 0.00253772, 0.00181574, 0.00153395, 0.000686367, 0.000380877, 0.000309436, 0.000246003, 0.000278578, 8.14963e-05, 0.000106196, 6.26607e-05, 6.54404e-05, 3.04216e-05, 1.34751e-05, 1.00754e-05, 2.08366e-05, 4.27263e-05, 6.05518e-05, 4.57646e-06, 8.65481e-06, 4.64904e-07, 1.64386e-06, 2.78901e-05, 3.0782e-07, 3.29845e-07, 4.68957e-07, 0, 4.29303e-05, 0, 2.48326e-05, 0, 0, 0, 0, 0, 0, 2.30956e-07, 1.13396e-07, 0, 2.64583e-08, 0, 0, 0, 0, 0, 2.5838e-10, 0, 5.06281e-11, 2.19646e-11, 0, 3.98899e-12, 0, 7.05927e-13, ],
    'qcdht0700_2017': [ 0.000296976, 0.0467324, 0.0515802, 0.0786023, 0.0767765, 0.116231, 0.138737, 0.160398, 0.130265, 0.410072, 0.512657, 0.678021, 0.713518, 0.708992, 0.759389, 0.824747, 0.905276, 0.998377, 1.08614, 1.14625, 1.19965, 1.24653, 1.29428, 1.32301, 1.33964, 1.33752, 1.35273, 1.35557, 1.35342, 1.34281, 1.31616, 1.25714, 1.19093, 1.12915, 1.04937, 0.9833, 0.943394, 0.9101, 0.854044, 0.817876, 0.819624, 0.8649, 0.929556, 1.04286, 1.18773, 1.35497, 1.53263, 1.60641, 1.65089, 1.56006, 1.39906, 1.20585, 1.01227, 0.785997, 0.592608, 0.427797, 0.301509, 0.208699, 0.144675, 0.101881, 0.0739957, 0.0529192, 0.0404076, 0.0295275, 0.0235286, 0.0173968, 0.0130823, 0.0109204, 0.00925239, 0.00839855, 0.00722617, 0.00497941, 0.00522982, 0.00483333, 0.00260868, 0.00363783, 0.00249555, 0.00237076, 0.000663494, 0.000644129, 0.000206572, 0.000206542, 0.000152026, 0.000100963, 0.000106128, 0.000102858, 2.58322e-05, 1.73662e-05, 1.88672e-05, 7.53359e-06, 2.95241e-05, 6.11551e-05, 6.30032e-05, 2.52389e-05, 4.77254e-06, 1.45403e-06, 1.8017e-05, 2.80801e-06, 1.98979e-06, 2.42407e-07, 0, 0, 8.34125e-05, 0, 0, 0, 0, 3.46539e-06, 0, 0, 4.52054e-07, 0, 1.10162e-07, 0, 1.28519e-08, 0, 5.741e-09, 0, 0, 2.79015e-10, 0, 1.11582e-10, 4.91845e-11, 2.13383e-11, 0, 3.87525e-12, 0, 6.85799e-13, 1.29359e-13, 7.74082e-14, ],
    }

pileup_weights_cross = {
    '2017to2018': [0.8088707410249003, 0.6419315492929617, 1.0289843771164762, 1.2197433115877707, 2.0279361447384607, 2.1534273598348346, 2.828875717156401, 3.7562409631757463, 3.7723330080421347, 2.128823541813255, 1.4437282808060388, 1.0592335461744988, 0.9296008325854023, 0.8981341246581729, 0.8661838708148207, 0.8217817668661503, 0.7698094682358639, 0.736530117843042, 0.7324825824243237, 0.7464654505340651, 0.7689672475157527, 0.7962598319502678, 0.8238273378355885, 0.84709530856804, 0.8629571604669926, 0.8715575979660287, 0.8790646285472657, 0.8930068377451257, 0.9181154528911909, 0.9565916718906213, 1.0085885148613083, 1.0733677243858069, 1.1513074018453253, 1.2438041844310648, 1.350425854765928, 1.4667928985090142, 1.5852313012565622, 1.6964317350776834, 1.7888779559697383, 1.8463573710989412, 1.8483344785348048, 1.777156775240319, 1.6296890426047426, 1.4238791110873033, 1.192636304616271, 0.9691350867625012, 0.7752988582908152, 0.6194609177490059, 0.5004018080190712, 0.41258518896855334, 0.3496354676827754, 0.3057454957410425, 0.27651357625145984, 0.2587768794251079, 0.2503442053532996, 0.24978113594279056, 0.25620094485064937, 0.269077026686218, 0.2880879933617664, 0.31297537926425495, 0.34340097870928926, 0.37879522132496796, 0.4181914535828073, 0.46006239241614966, 0.5022042593864846, 0.5417448111098889, 0.5753590543126583, 0.599729908816729, 0.6121804339703449, 0.6112764589874742, 0.5971519453774672, 0.5714120667068647, 0.5366696442401658, 0.4959276770798611, 0.45203677112054097, 0.4073572740266353, 0.3636364273599529, 0.3220390572953875, 0.2832554359014485, 0.24762792649752466, 0.2152638164237845, 0.18612213801734914, 0.1600742314358133, 0.13694300589056346, 0.1165269986399804, 0.0986145541296668, 0.08299205921121872, 0.06944883162594205, 0.057780217187997036, 0.04778974199444527, 0.03929073201556682, 0.03210757396626401, 0.02607667588961756, 0.02104713973802034, 0.016881148969658692, 0.013454078923061686, 0.010654347125878181, 0.008383033422255411, 0.006553300860721036, 0.005089663013060519, 0.0039271342139648915, 0.0030102988351013078, 0.0022923603178735402, 0.001734152193216896, 0.0013032269067089236, 0.0009729254729590597, 0.0007215235730044382, 0.000531537519428578, 0.0003890108881886131, 0.0002828005460800867, 0.0002043072260251089, 0.00014647800144821486, 0.00010417815899462249, 7.364182160440637e-05, 5.127986461383892e-05, 3.7258169988485095e-05, 2.3663515932329523e-05, 1.4565424506047685e-05],
    '2017to2017p8': [0.8935951408298133, 0.8006572971868576, 1.0161360881204278, 1.1223347814377993, 1.5722692658536948, 1.6421323268053671, 2.0181657385547362, 2.534445500905878, 2.5434042117644364, 1.628434969291015, 1.247030964710364, 1.0329763070952394, 0.9608076045780906, 0.9432895613255792, 0.9255023199639804, 0.9007829251269303, 0.8718490761382361, 0.8533219044701619, 0.851068573721513, 0.8588530705588401, 0.8713801977593099, 0.8865744365625031, 0.9019217287412636, 0.9148753976993226, 0.9237059562780395, 0.9284939638588475, 0.9326732534980483, 0.9404351148382466, 0.9544135013652595, 0.9758338568147046, 1.0047813700487254, 1.0408450407999854, 1.0842353644391847, 1.1357298722791027, 1.1950879416678886, 1.2598714236315123, 1.3258080658404194, 1.387715209539133, 1.439181568837458, 1.47118132180466, 1.472282010623345, 1.4326561912395432, 1.3505584349494948, 1.2359805995287443, 1.1072438567159935, 0.9828169859290673, 0.8749051115085372, 0.7881475203074773, 0.7218653201269597, 0.6729763377022978, 0.6379311736906046, 0.6134968913181085, 0.5972229922131653, 0.5873486760667394, 0.5826540651952781, 0.5823405950251453, 0.5859146101518885, 0.5930829405358616, 0.6036666640465795, 0.6175218885489328, 0.6344603292747409, 0.6541648968597982, 0.6760974390969733, 0.6994076919267912, 0.7228687749875038, 0.7448816622879691, 0.7635952743915407, 0.7771629372144296, 0.7840943530670802, 0.7835910950559232, 0.7757277417965669, 0.761397920294146, 0.7420562319015706, 0.7193744965081769, 0.6949396941524486, 0.6700658699061506, 0.6457257424064894, 0.6225677898915012, 0.6009762983811952, 0.5811418672687777, 0.5631242252131812, 0.5469005648304263, 0.5323992590316756, 0.5195217184093012, 0.508155785281298, 0.49818362745609557, 0.4894863229167575, 0.481946581321731, 0.4754504682585683, 0.4698886034153022, 0.46515706223349695, 0.4611580778564747, 0.45780057590226625, 0.45500054890079195, 0.4526812720753135, 0.4507733647897941, 0.4492147072132876, 0.4479502288384889, 0.4469315860803201, 0.44611675438007914, 0.4454695551296223, 0.4449591375206526, 0.44455944912533246, 0.4442486853144421, 0.4440087819910597, 0.44382489765158006, 0.4436849380038358, 0.44357916958625565, 0.44349982262385756, 0.44344069354778054, 0.44339699500203705, 0.44336480050429233, 0.44334125147363457, 0.44332425138324016, 0.4433118021073046, 0.4433039959950959, 0.44329642762352334, 0.4432913625636673, 0.4432832537479286, 0.44328325374792854, 0.4432832537479286, 0.44328325374792854, 0.44328325374792854, 0.4432832537479286, 0.44328325374792854, 0.4432832537479286, 0.44328325374792854, 0.44328325374792854, 0.44328325374792854, 0.44328325374792854, 0.4432832537479286],
    }

def get_pileup_weights(sample, cross=None):
    from JMTucker.Tools.Year import year
    weights = pileup_weights.get(sample, pileup_weights[year])
    if cross:
        assert pileup_weights_cross.has_key(cross)
        weights = [a*b for a,b in zip(weights, pileup_weights_cross[cross])]
    return weights

########################################################################

class derive_weights(object):
    def __init__(self, data_fn, mc_fn, data_path='pileup', mc_path='PileupDist/h_npu', tol=1e-9, raise_tol=True):
        from JMTucker.Tools.ROOTTools import ROOT

        self.data_f = ROOT.TFile(data_fn)
        self.mc_f   = ROOT.TFile(mc_fn)
        self.data_h = self.data_f.Get(data_path)
        self.mc_h   = self.mc_f.Get(mc_path)

        def norm(h):
            h = h.Clone(h.GetName() + '_norm')
            h.Sumw2()
            h.Scale(1/h.Integral(1, h.GetNbinsX()+1))
            return h

        self.data_h.SetLineColor(ROOT.kBlack)
        self.data_h.SetLineWidth(2)
        self.mc_h.SetLineColor(ROOT.kRed)
        self.mc_h.SetLineWidth(2)

        self.data_h_orig = self.data_h
        self.mc_h_orig   = self.mc_h

        self.data_h = norm(self.data_h)
        self.mc_h   = norm(self.mc_h)

        self.ndata = self.data_h.GetNbinsX()
        assert self.ndata == self.mc_h.GetNbinsX() # JMTBAD

        self.weights = []

        for i in xrange(1, self.ndata+1):
            d = self.data_h.GetBinContent(i)
            m = self.mc_h.GetBinContent(i)
            w = -1
            if m == 0:
                if d > tol:
                    msg = 'm == 0 and d = %g > tol=%g for i = %i' % (d, tol, i)
                    if raise_tol:
                        raise ValueError(msg)
                    else:
                        print msg
                w = 0
            else:
                w = d/m
            self.weights.append(w)

        while self.weights[-1] == 0:
            self.weights.pop()


if __name__ == '__main__':
    from sys import argv, exit

    if len(argv) > 1:
        if argv[1] == 'cross':
            if len(argv) < 4:
                exit('usage: %s cross num_fn den_fn' % argv[0])
            print derive_weights(argv[2], argv[3], mc_path='pileup', raise_tol=False).weights
        else:
            if len(argv) < 3:
                exit('usage: %s data_fn mc_fn [mc_fn2 ...]' % argv[0])
            data_fn = argv[1]
            for mc_fn in argv[2:]:
                ww = derive_weights(data_fn, mc_fn, raise_tol=False)
                print mc_fn, '[',
                for w in ww.weights:
                    print '%.6g,' % w,
                print ']'
