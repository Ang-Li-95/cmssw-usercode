#!/usr/bin/env python

import os, sys, fnmatch, argparse
from pprint import pprint
from JMTucker.Tools.CRAB3ToolsBase import crab_dirs_from_argv
from JMTucker.Tools.CRAB3ToolsSh import crab_get_njobs_from_log, crab_get_output_dataset_from_log
from JMTucker.Tools.DBS import files_in_dataset, numevents_in_dataset
from JMTucker.Tools.general import coderep_files
from JMTucker.Tools.SampleFiles import _enc

parser = argparse.ArgumentParser(description = 'cr_publish: get the staged-out files from crab directories and print out lines for SampleFiles.py',
                                 usage = '%(prog)s [options] crab_dirs')

parser.add_argument('crab_dirs', nargs='*', help='The crab directories.')

parser.add_argument('--dataset', required=True,
                    help='The dataset name to use.')
parser.add_argument('--pattern',
                    help='Glob-style pattern to filter the files, useful if there are multiple files output per job.')
parser.add_argument('--partial', action='store_true',
                    help='If set, partial publishing is allowed.')

options = parser.parse_args()

########################################################################

wds = crab_dirs_from_argv()
if not wds:
    print 'No crab dirs in argv\n'
    parser.print_help()
    sys.exit(1)

publish = {}
samples = []
for wd in wds:
    bd = os.path.basename(wd)
    assert bd.startswith('crab_')
    sample = bd.replace('crab_', '')
    assert not publish.has_key((sample, options.dataset))
    njobs = crab_get_njobs_from_log(wd)
    ds = crab_get_output_dataset_from_log(wd)
    dbs_files = files_in_dataset(ds, 3)
    files = []
    for fn in dbs_files:
        if options.pattern is None or fnmatch.fnmatch(os.path.basename(fn), options.pattern):
            files.append(fn)
    samples.append((sample, ds, numevents_in_dataset(ds, 3)))

    code = coderep_files(files)
    publish[(sample, options.dataset)] = (len(files), code if code is not None else files)

print 'new entries:'
for k in sorted(publish.keys()):
    n,c = publish[k]
    if type(c) == str:
        print k, ': (', n, ',', c, ')'
    else:
        pprint((k,(n,c)))
encoded = _enc(publish)
print '\nline for SampleFiles (len(repr(publish)) = %i, len(encoded) = %i):' % (len(repr(publish)), len(encoded))
print "_add('%s')" % encoded
print '\nlines for Samples:'
for sample, ds, nevents in samples:
    print "%s.add_dataset('%s', '%s', %i)" % (sample, options.dataset, ds, nevents)

