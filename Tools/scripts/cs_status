#!/usr/bin/env python

import sys
from collections import defaultdict
from JMTucker.Tools.CRAB3ToolsBase import crabify_list
from JMTucker.Tools.CondorTools import *
from JMTucker.Tools import colors

if len(sys.argv) < 2:
    print 'usage: cs_status wd [wd2 ...]'
    sys.exit(1)

verbose = '-v' in sys.argv
wds = cs_dirs_from_argv()
ml = max(len(wd) for wd in wds) + 3
fmt = '%' + str(ml) + 's %10s | %10s %10s %10s %10s %10s'

def return_code(r):
    if r == 147:
        return 'xrdcp problem'
    else:
        return 'Exit %i' % r

def z(n):
    return '-' if n == 0 else str(n)

print colors.bold(fmt % ('dir'.ljust(ml), 'njobs', 'done', 'idle', 'run', 'killed', 'problem'))

sums = [0]*6
done = []

for wd in wds:
    ana = cs_analyze(wd)

    for i in xrange(6):
        sums[i] += ana.ns[i]

    color = colors.cyan
    if ana.nprobs:
        color = colors.magenta
    elif ana.nkilled:
        color = colors.yellow
    elif ana.ndone == ana.njobs:
        done.append(wd)
        color = colors.green
    
    print color(fmt % (wd.ljust(ml), z(ana.njobs), z(ana.ndone), z(ana.nidle), z(ana.nrun), z(ana.nkilled), z(ana.nprobs))), 
    if ana.nprobs:
        print ' :', colors.magenta(crabify_list(ana.probs())),
    if ana.nkilled:
        print ' :', colors.yellow(crabify_list(ana.killed())),
    if ana.nprobs:
        if verbose:
            print
            by_exit = defaultdict(list)
            for i, r in enumerate(ana.returns):
                if r > 0:
                    assert ana.cmsRun_returns[i] == (0 if r == 147 else r)
                    by_exit[r].append(i)

            by_exception = defaultdict(list)
            for i, e in ana.exceptions.iteritems():
                by_exception[e].append(i)

            for r, l in by_exit.iteritems():
                print '  %s:' % return_code(r), crabify_list(l)
            for e, l in by_exception.iteritems():
                print '  %s:' % e, crabify_list(l)
    elif verbose:
        print
    print

print colors.bold(fmt % (('totals'.ljust(ml),) + tuple(sums)))

if done:
    print '\nthese are done:', ' '.join(done)
if len(done) == len(wds):
    print '\nAll done!'
