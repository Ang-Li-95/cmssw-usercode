#!/usr/bin/env python

import os
import glob
import sys
import JMTucker.Tools.argparse as argparse
from JMTucker.Tools.CRAB3ToolsSh import is_crab_working_dir, crab_hadd

parser = argparse.ArgumentParser(description = 'crhadd: hadd the files from a crab directory',
                                 usage = '%(prog)s [options] crab_dirs')

parser.add_argument('positional', nargs='*', help='The crab directories.')

parser.add_argument('--chunk-size', default=900, type=int,
                    help='The maximum number files hadded at once.')
parser.add_argument('--pattern',
                    help='Glob-style pattern to filter the files, useful if there are multiple files output per job.')
parser.add_argument('--no-lpc-shortcut', action='store_false', dest='lpc_shortcut', default=True,
                    help='Most of the time files went to FNAL LPC EOS, this is used to bypass talking to the crab server--turn off if needed.')

options = parser.parse_args()

if len(options.positional) == 0:
    print 'Required positional args missing: at least one crab directory\n'
    parser.print_help()
    sys.exit(1)

if options.lpc_shortcut:
    print 'using LPC shortcut'

########################################################################

crab_dirs = options.positional

ok = False

def crab_hadd_(*args, **kwargs):
    kwargs['chunk_size'] = options.chunk_size
    kwargs['pattern'] = options.pattern
    kwargs['lpc_shortcut'] = options.lpc_shortcut
    return crab_hadd(*args, **kwargs)

for x in crab_dirs:
    if is_crab_working_dir(x):
        ok = True
        crab_hadd_(x)
    elif os.path.isdir(x):
        # if we have a dir of crab dirs, crab_hadd all the directories in it.
        sub_dirs = [d for d in glob.glob(os.path.join(x, '*')) if is_crab_working_dir(d)]
        for y in sub_dirs:
            ok = True
            crab_hadd_(y, new_dir=x)

if not ok:
    raise ValueError('no crab dirs found in argv')
