#!/usr/bin/env python

import os, sys
from itertools import combinations
from glob import glob
import JMTucker.Tools.colors as colors
from JMTucker.Tools.LumiJSONTools import LumiList, fjr2ll
from JMTucker.Tools.CondorTools import cs_dirs_from_argv, cs_njobs

wds = cs_dirs_from_argv()
if not wds:
    sys.exit(colors.red('No condor dirs in argv'))
global_json_fn = [x for x in sys.argv if x.endswith('json')]
if global_json_fn:
    global_json_fn = global_json_fn[0]
else:
    global_json_fn = 'processedLumis.json'
if os.path.isfile(global_json_fn):
    print colors.red('output file %s already exists' % global_json_fn)
    sys.exit(1)

ll_alls = []

problem = False

for wd in wds:
    print colors.bold(wd)

    njobs = cs_njobs(wd)
    lls = []

    for i in xrange(njobs):
        fjr_fn = os.path.join(wd, 'fjr_%i.xml' % i)
        try:
            lls.append((i,fjr2ll(fjr_fn)))
        except:
            problem = True
            print colors.red('problem with fjr for job %i' % i)

    for (ia,lla),(ib,llb) in combinations(lls,2):
        if lla & llb:
            problem = True
            print colors.red('overlap found in pair %i + %i' % (ia,ib))
            print ia, lla
            print ib, llb
            print 'and', (lla&llb)
            continue

    ll_all = lls.pop()
    for i,ll in lls:
        ll_all |= ll
    ll_all.writeJSON(os.path.join(wd, 'processedLumis.json'))
    ll_alls.append(ll_all)

if any(lla & llb for lla,llb in combinations(ll_alls,2)):
    print colors.red('globally overlap found')
elif not problem:
    print colors.green('no overlap, writing to %s' % global_json_fn)
    ll_all = ll_alls.pop()
    for ll in ll_alls:
        ll_all |= ll
    ll_all.writeJSON(global_json_fn)


