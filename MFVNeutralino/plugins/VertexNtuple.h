#ifndef JMTucker_MFVNeutralino_plugins_VertexNtuple_h
#define JMTucker_MFVNeutralino_plugins_VertexNtuple_h

struct VertexNtuple {
  typedef unsigned short ushort;
  typedef unsigned int uint;

  uint run;
  uint lumi;
  uint event;
  float minlspdist2d;
  float lspdist2d;
  float lspdist3d;
  short pass_trigger;
  ushort npfjets;
  ushort ntightpfjets;
  float pfjetpt4;
  float pfjetpt5;
  float tightpfjetpt4;
  float tightpfjetpt5;

  std::vector<ushort> ntracks;
  std::vector<ushort> ntracksptgt10;
  std::vector<ushort> ntracksptgt20;
  std::vector<ushort> trackminnhits;
  std::vector<ushort> trackmaxnhits;
  std::vector<ushort> njetssharetks;
  std::vector<float>  jetsmass;
  std::vector<float>  chi2dof;
  std::vector<float>  chi2dofprob;
  std::vector<float>  p;
  std::vector<float>  pt;
  std::vector<float>  eta;
  std::vector<float>  rapidity;
  std::vector<float>  phi;
  std::vector<float>  mass;
  std::vector<float>  costhmombs;
  std::vector<float>  costhmompv2d;
  std::vector<float>  costhmompv3d;
  std::vector<float>  sumpt2;
  std::vector<ushort> sumnhitsbehind;
  std::vector<ushort> maxnhitsbehind;
  std::vector<float>  mintrackpt;
  std::vector<float>  maxtrackpt;
  std::vector<float>  maxm1trackpt;
  std::vector<float>  maxm2trackpt;
  std::vector<float>  drmin;
  std::vector<float>  drmax;
  std::vector<float>  dravg;
  std::vector<float>  drrms;
  std::vector<float>  dravgw;
  std::vector<float>  drrmsw;
  std::vector<float>  gen2ddist;
  std::vector<float>  gen2derr;
  std::vector<float>  gen2dsig;
  std::vector<float>  gen3ddist;
  std::vector<float>  gen3derr;
  std::vector<float>  gen3dsig;
  std::vector<ushort> bs2dcompatscss;
  std::vector<float>  bs2dcompat;
  std::vector<float>  bs2ddist;
  std::vector<float>  bs2derr;
  std::vector<float>  bs2dsig;
  std::vector<float>  bs3ddist;
  std::vector<ushort> pv2dcompatscss;
  std::vector<float>  pv2dcompat;
  std::vector<float>  pv2ddist;
  std::vector<float>  pv2derr;
  std::vector<float>  pv2dsig;
  std::vector<ushort> pv3dcompatscss;
  std::vector<float>  pv3dcompat;
  std::vector<float>  pv3ddist;
  std::vector<float>  pv3derr;
  std::vector<float>  pv3dsig;

  void clear() {
    run           = -1;
    lumi          = -1;
    event         = -1;
    minlspdist2d  = -1;
    lspdist2d     = -1;
    lspdist3d     = -1;
    pass_trigger  = -1;
    npfjets       = -1;
    ntightpfjets  = -1;
    pfjetpt4      = -1;
    pfjetpt5      = -1;
    tightpfjetpt4 = -1;
    tightpfjetpt5 = -1;

    ntracks.clear();
    ntracksptgt10.clear();
    ntracksptgt20.clear();
    trackminnhits.clear();
    trackmaxnhits.clear();
    njetssharetks.clear();
    jetsmass.clear();
    chi2dof.clear();
    chi2dofprob.clear();
    p.clear();
    pt.clear();
    eta.clear();
    rapidity.clear();
    phi.clear();
    mass.clear();
    costhmombs.clear();
    costhmompv2d.clear();
    costhmompv3d.clear();
    sumpt2.clear();
    sumnhitsbehind.clear();
    maxnhitsbehind.clear();
    mintrackpt.clear();
    maxtrackpt.clear();
    maxm1trackpt.clear();
    maxm2trackpt.clear();
    drmin.clear();
    drmax.clear();
    dravg.clear();
    drrms.clear();
    dravgw.clear();
    drrmsw.clear();
    gen2ddist.clear();
    gen2derr.clear();
    gen2dsig.clear();
    gen3ddist.clear();
    gen3derr.clear();
    gen3dsig.clear();
    bs2dcompatscss.clear();
    bs2dcompat.clear();
    bs2ddist.clear();
    bs2derr.clear();
    bs2dsig.clear();
    bs3ddist.clear();
    pv2dcompatscss.clear();
    pv2dcompat.clear();
    pv2ddist.clear();
    pv2derr.clear();
    pv2dsig.clear();
    pv3dcompatscss.clear();
    pv3dcompat.clear();
    pv3ddist.clear();
    pv3derr.clear();
    pv3dsig.clear();
  }

  void write(TTree* tree) {
    tree->Branch("run", &run, "run/i");
    tree->Branch("lumi", &lumi, "lumi/i");
    tree->Branch("event", &event, "event/i");
    tree->Branch("minlspdist2d", &minlspdist2d, "minlspdist2d/F");
    tree->Branch("lspdist2d", &lspdist2d, "lspdist2d/F");
    tree->Branch("lspdist3d", &lspdist3d, "lspdist3d/F");
    tree->Branch("pass_trigger", &pass_trigger, "pass_trigger/S");
    tree->Branch("npfjets", &npfjets, "npfjets/s");
    tree->Branch("ntightpfjets", &ntightpfjets, "ntightpfjets/s");
    tree->Branch("pfjetpt4", &pfjetpt4, "pfjetpt4/F");
    tree->Branch("pfjetpt5", &pfjetpt5, "pfjetpt5/F");
    tree->Branch("tightpfjetpt4", &tightpfjetpt4, "tightpfjetpt4/F");
    tree->Branch("tightpfjetpt5", &tightpfjetpt5, "tightpfjetpt5/F");

    tree->Branch("ntracks", &ntracks);
    tree->Branch("ntracksptgt10", &ntracksptgt10);
    tree->Branch("ntracksptgt20", &ntracksptgt20);
    tree->Branch("trackminnhits", &trackminnhits);
    tree->Branch("trackmaxnhits", &trackmaxnhits);
    tree->Branch("njetssharetks", &njetssharetks);
    tree->Branch("jetsmass", &jetsmass);
    tree->Branch("chi2dof", &chi2dof);
    tree->Branch("chi2dofprob", &chi2dofprob);
    tree->Branch("p", &pt);
    tree->Branch("pt", &pt);
    tree->Branch("eta", &eta);
    tree->Branch("rapidity", &rapidity);
    tree->Branch("phi", &phi);
    tree->Branch("mass", &mass);
    tree->Branch("costhmombs", &costhmombs);
    tree->Branch("costhmompv2d", &costhmompv2d);
    tree->Branch("costhmompv3d", &costhmompv3d);
    tree->Branch("sumpt2", &sumpt2);
    tree->Branch("sumnhitsbehind", &sumnhitsbehind);
    tree->Branch("maxnhitsbehind", &maxnhitsbehind);
    tree->Branch("mintrackpt", &mintrackpt);
    tree->Branch("maxtrackpt", &maxtrackpt);
    tree->Branch("maxm1trackpt", &maxm1trackpt);
    tree->Branch("maxm2trackpt", &maxm2trackpt);
    tree->Branch("drmin", &drmin);
    tree->Branch("drmax", &drmax);
    tree->Branch("dravg", &dravg);
    tree->Branch("drrms", &drrms);
    tree->Branch("dravgw", &dravgw);
    tree->Branch("drrmsw", &drrmsw);
    tree->Branch("gen2ddist", &gen2ddist);
    tree->Branch("gen2derr", &gen2derr);
    tree->Branch("gen2dsig", &gen2dsig);
    tree->Branch("gen3ddist", &gen3ddist);
    tree->Branch("gen3derr", &gen3derr);
    tree->Branch("gen3dsig", &gen3dsig);
    tree->Branch("bs2dcompatscss", &bs2dcompatscss);
    tree->Branch("bs2dcompat", &bs2dcompat);
    tree->Branch("bs2ddist", &bs2ddist);
    tree->Branch("bs2derr", &bs2derr);
    tree->Branch("bs2dsig", &bs2dsig);
    tree->Branch("bs3ddist", &bs3ddist);
    tree->Branch("pv2dcompatscss", &pv2dcompatscss);
    tree->Branch("pv2dcompat", &pv2dcompat);
    tree->Branch("pv2ddist", &pv2ddist);
    tree->Branch("pv2derr", &pv2derr);
    tree->Branch("pv2dsig", &pv2dsig);
    tree->Branch("pv3dcompatscss", &pv3dcompatscss);
    tree->Branch("pv3dcompat", &pv3dcompat);
    tree->Branch("pv3ddist", &pv3ddist);
    tree->Branch("pv3derr", &pv3derr);
    tree->Branch("pv3dsig", &pv3dsig);
  }

  void read(TTree* tree) {
    tree->SetBranchAddress("run", &run);
    tree->SetBranchAddress("lumi", &lumi);
    tree->SetBranchAddress("event", &event);
    tree->SetBranchAddress("minlspdist2d", &minlspdist2d);
    tree->SetBranchAddress("lspdist2d", &lspdist2d);
    tree->SetBranchAddress("lspdist3d", &lspdist3d);
    tree->SetBranchAddress("pass_trigger", &pass_trigger);
    tree->SetBranchAddress("npfjets", &npfjets);
    tree->SetBranchAddress("ntightpfjets", &ntightpfjets);
    tree->SetBranchAddress("pfjetpt4", &pfjetpt4);
    tree->SetBranchAddress("pfjetpt5", &pfjetpt5);
    tree->SetBranchAddress("tightpfjetpt4", &tightpfjetpt4);
    tree->SetBranchAddress("tightpfjetpt5", &tightpfjetpt5);

    tree->SetBranchAddress("ntracks", &ntracks);
    tree->SetBranchAddress("ntracksptgt10", &ntracksptgt10);
    tree->SetBranchAddress("ntracksptgt20", &ntracksptgt20);
    tree->SetBranchAddress("trackminnhits", &trackminnhits);
    tree->SetBranchAddress("trackmaxnhits", &trackmaxnhits);
    tree->SetBranchAddress("njetssharetks", &njetssharetks);
    tree->SetBranchAddress("jetsmass", &jetsmass);
    tree->SetBranchAddress("chi2dof", &chi2dof);
    tree->SetBranchAddress("chi2dofprob", &chi2dofprob);
    tree->SetBranchAddress("p", &pt);
    tree->SetBranchAddress("pt", &pt);
    tree->SetBranchAddress("eta", &eta);
    tree->SetBranchAddress("rapidity", &rapidity);
    tree->SetBranchAddress("phi", &phi);
    tree->SetBranchAddress("mass", &mass);
    tree->SetBranchAddress("costhmombs", &costhmombs);
    tree->SetBranchAddress("costhmompv2d", &costhmompv2d);
    tree->SetBranchAddress("costhmompv3d", &costhmompv3d);
    tree->SetBranchAddress("sumpt2", &sumpt2);
    tree->SetBranchAddress("sumnhitsbehind", &sumnhitsbehind);
    tree->SetBranchAddress("maxnhitsbehind", &maxnhitsbehind);
    tree->SetBranchAddress("mintrackpt", &mintrackpt);
    tree->SetBranchAddress("maxtrackpt", &maxtrackpt);
    tree->SetBranchAddress("maxm1trackpt", &maxm1trackpt);
    tree->SetBranchAddress("maxm2trackpt", &maxm2trackpt);
    tree->SetBranchAddress("drmin", &drmin);
    tree->SetBranchAddress("drmax", &drmax);
    tree->SetBranchAddress("dravg", &dravg);
    tree->SetBranchAddress("drrms", &drrms);
    tree->SetBranchAddress("dravgw", &dravgw);
    tree->SetBranchAddress("drrmsw", &drrmsw);
    tree->SetBranchAddress("gen2ddist", &gen2ddist);
    tree->SetBranchAddress("gen2derr", &gen2derr);
    tree->SetBranchAddress("gen2dsig", &gen2dsig);
    tree->SetBranchAddress("gen3ddist", &gen3ddist);
    tree->SetBranchAddress("gen3derr", &gen3derr);
    tree->SetBranchAddress("gen3dsig", &gen3dsig);
    tree->SetBranchAddress("bs2dcompatscss", &bs2dcompatscss);
    tree->SetBranchAddress("bs2dcompat", &bs2dcompat);
    tree->SetBranchAddress("bs2ddist", &bs2ddist);
    tree->SetBranchAddress("bs2derr", &bs2derr);
    tree->SetBranchAddress("bs2dsig", &bs2dsig);
    tree->SetBranchAddress("bs3ddist", &bs3ddist);
    tree->SetBranchAddress("pv2dcompatscss", &pv2dcompatscss);
    tree->SetBranchAddress("pv2dcompat", &pv2dcompat);
    tree->SetBranchAddress("pv2ddist", &pv2ddist);
    tree->SetBranchAddress("pv2derr", &pv2derr);
    tree->SetBranchAddress("pv2dsig", &pv2dsig);
    tree->SetBranchAddress("pv3dcompatscss", &pv3dcompatscss);
    tree->SetBranchAddress("pv3dcompat", &pv3dcompat);
    tree->SetBranchAddress("pv3ddist", &pv3ddist);
    tree->SetBranchAddress("pv3derr", &pv3derr);
    tree->SetBranchAddress("pv3dsig", &pv3dsig);
  }
};

#endif
