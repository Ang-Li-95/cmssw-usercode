import sys
from collections import defaultdict

tau0s = [100*x for x in xrange(1,10)] + [1000*x for x in range(1,11) + range(12,31,2)]
masses = range(300, 1501, 100)

def make_name(tau0, mass):
    return 'mfv_neutralino_tau%05ium_M%04i' % (tau0, mass)

name2num = {}
num2name = {}
name2mass = {}
name2fn = {}
num2nevt = {}
num2npass = {-477: 52008, -476: 52175, -475: 52193, -474: 52603, -473: 52738, -472: 51948, -471: 51093, -470: 50243, -469: 48630, -468: 46759, -467: 42995, -466: 33938, -465: 15798, -464: 53179, -463: 53797, -462: 54140, -461: 53963, -460: 53865, -459: 53744, -458: 52898, -457: 52070, -456: 50757, -455: 48613, -454: 44625, -453: 35287, -452: 16623, -451: 54790, -450: 55164, -449: 55306, -448: 55364, -447: 55806, -446: 55186, -445: 54993, -444: 53650, -443: 52707, -442: 50417, -441: 46192, -440: 37248, -439: 17713, -438: 55922, -437: 56673, -436: 56721, -435: 56961, -434: 57251, -433: 57202, -432: 56486, -431: 55543, -430: 54112, -429: 52296, -428: 48060, -427: 38860, -426: 18416, -425: 57281, -424: 57760, -423: 58282, -422: 58650, -421: 58548, -420: 58612, -419: 58208, -418: 57334, -417: 56493, -416: 54532, -415: 50263, -414: 40501, -413: 19472, -412: 58332, -411: 59365, -410: 59779, -409: 59151, -408: 60372, -407: 60148, -406: 59895, -405: 59817, -404: 58547, -403: 56578, -402: 52204, -401: 42339, -400: 20640, -399: 59499, -398: 60353, -397: 60701, -396: 61428, -395: 61412, -394: 61979, -393: 61958, -392: 61264, -391: 60039, -390: 58526, -389: 54069, -388: 43973, -387: 22026, -386: 60032, -385: 61228, -384: 61996, -383: 62470, -382: 62685, -381: 63430, -380: 63423, -379: 62970, -378: 62374, -377: 60140, -376: 56380, -375: 45958, -374: 23176, -373: 61210, -372: 61648, -371: 62512, -370: 63476, -369: 64103, -368: 64755, -367: 64596, -366: 64466, -365: 63815, -364: 62335, -363: 57858, -362: 47459, -361: 24499, -360: 61586, -359: 62185, -358: 63085, -357: 63883, -356: 64911, -355: 65076, -354: 65921, -353: 65585, -352: 65127, -351: 63214, -350: 59202, -349: 49209, -348: 25300, -347: 61219, -346: 62257, -345: 63537, -344: 64037, -343: 64743, -342: 65691, -341: 66243, -340: 66346, -339: 65866, -338: 64290, -337: 60210, -336: 49410, -335: 26560, -334: 61115, -333: 61789, -332: 62559, -331: 63565, -330: 64735, -329: 65587, -328: 66249, -327: 66548, -326: 65856, -325: 64428, -324: 60643, -323: 49935, -322: 26597, -321: 60456, -320: 61456, -319: 61978, -318: 63133, -317: 64152, -316: 64804, -315: 65840, -314: 65887, -313: 65834, -312: 64460, -311: 60159, -310: 49898, -309: 26832, -308: 59429, -307: 60550, -306: 61475, -305: 62541, -304: 63392, -303: 64120, -302: 64934, -301: 65654, -300: 65011, -299: 63974, -298: 59968, -297: 49490, -296: 26222, -295: 58537, -294: 59267, -293: 60163, -292: 60825, -291: 62108, -290: 63052, -289: 63759, -288: 64206, -287: 64001, -286: 62641, -285: 58895, -284: 48393, -283: 26232, -282: 56612, -281: 57897, -280: 58492, -279: 59776, -278: 60496, -277: 61422, -276: 62063, -275: 62526, -274: 62457, -273: 61039, -272: 57133, -271: 47533, -270: 25410, -269: 54136, -268: 55493, -267: 56212, -266: 57472, -265: 58213, -264: 58935, -263: 59734, -262: 59823, -261: 59564, -260: 58402, -259: 54696, -258: 44745, -257: 24182, -256: 50326, -255: 51489, -254: 51989, -253: 53100, -252: 54100, -251: 54769, -250: 55558, -249: 56042, -248: 55568, -247: 54159, -246: 50480, -245: 41697, -244: 22034, -243: 44436, -242: 45055, -241: 46098, -240: 46915, -239: 47076, -238: 48364, -237: 48942, -236: 49494, -235: 49012, -234: 47290, -233: 43875, -232: 35687, -231: 18914, -230: 31880, -229: 32497, -228: 33122, -227: 33713, -226: 34361, -225: 35179, -224: 35502, -223: 35926, -222: 35295, -221: 33973, -220: 31579, -219: 25118, -218: 13317, -217: 29819, -216: 30383, -215: 30921, -214: 31848, -213: 32400, -212: 33248, -211: 33370, -210: 33803, -209: 33373, -208: 31784, -207: 29091, -206: 23447, -205: 12344, -204: 27651, -203: 28298, -202: 28766, -201: 29113, -200: 29604, -199: 30663, -198: 31069, -197: 31296, -196: 30620, -195: 29807, -194: 26962, -193: 21426, -192: 11103, -191: 25052, -190: 25590, -189: 25943, -188: 26486, -187: 27272, -186: 27947, -185: 28431, -184: 28310, -183: 28287, -182: 27027, -181: 24248, -180: 19398, -179: 10249, -178: 21944, -177: 22529, -176: 23055, -175: 23672, -174: 24301, -173: 24570, -172: 25197, -171: 25257, -170: 24991, -169: 23968, -168: 21614, -167: 17068, -166: 9195, -165: 18678, -164: 19192, -163: 20032, -162: 20347, -161: 20612, -160: 21175, -159: 21698, -158: 21729, -157: 21632, -156: 20630, -155: 18514, -154: 14691, -153: 7777, -152: 14744, -151: 15356, -150: 15621, -149: 16506, -148: 16739, -147: 17197, -146: 17380, -145: 17688, -144: 17143, -143: 16511, -142: 14689, -141: 11650, -140: 6073, -139: 10434, -138: 10912, -137: 11508, -136: 11595, -135: 12136, -134: 12743, -133: 12713, -132: 12810, -131: 12632, -130: 11993, -129: 10764, -128: 8223, -127: 4438, -126: 5697, -125: 5971, -124: 6193, -123: 6478, -122: 6961, -121: 7056, -120: 7101, -119: 7298, -118: 7223, -117: 6814, -116: 5968, -115: 4580, -114: 2590, -113: 1461, -112: 1489, -111: 1622, -110: 1644, -109: 1753, -108: 1916, -107: 1965, -106: 1846, -105: 1976, -104: 1748, -103: 1570, -102: 1241, -101: 670}
def num2eff(num):
    return num2npass[num] / float(num2nevt[num])

tau2range = defaultdict(list)

num = -100
for tau0 in tau0s:
    print 'tau%05ium' % tau0, num-1, 'to',
    for mass in masses:
        num -= 1
        name = make_name(tau0, mass)

        name2num[name] = num
        num2name[num] = name
        name2mass[name] = mass

        tau2range[tau0].append(num)

        nevt = 100000

        if mass == 400:
            if tau0 in (100, 200, 300, 500, 600, 800, 10000):
                nevt -= 200
            elif tau0 == 400:
                nevt -= 600
            elif tau0 == 6000:
                nevt -= 400
        elif mass == 1000:
            if tau0 == 26000:
                nevt -= 200
        elif mass == 1500:
            if tau0 == 300:
                nevt -= 400
            elif tau0 == 16000 or tau0 == 28000:
                nevt -= 200
        elif mass == 300:
            if tau0 in (500, 700, 900, 3000, 20000, 24000):
                nevt -= 200
        elif mass == 500:
            if tau0 == 600:
                nevt -= 200
        elif mass == 700:
            if tau0 in (200, 5000, 7000, 9000, 10000, 24000):
                nevt -= 200
        elif mass == 600:
            if tau0 == 600:
                nevt -= 200
            elif tau0 == 16000:
                nevt -= 400
        elif mass == 900:
            if tau0 == 20000:
                nevt -= 200
        elif mass == 1300:
            if tau0 == 8000:
                nevt -= 200
        elif mass == 1200:
            if tau0 in (500, 600, 700, 800, 1000, 9000, 14000, 28000):
                nevt -= 200
            elif tau0 == 200:
                nevt -= 400
            elif tau0 == 6000:
                nevt -= 1000
            elif tau0 == 20000:
                nevt -= 2000
        elif mass == 800:
            if tau0 == 300 or tau0 == 8000:
                nevt -= 200
        elif mass == 1100:
            if tau0 in (100, 200, 600, 900, 5000, 16000):
                nevt -= 200
            elif tau0 in (400, 800, 2000):
                nevt -= 400

        num2nevt[num] = nevt

        path = 'root://cmsxrootd.fnal.gov//store/user/tucker/mfv_sample_scan/'
        if mass in [300, 500, 700, 900, 1300]:
            path = path.replace('tucker', 'jchu')
        fn = path + name + '.root'
        name2fn[name] = fn
    print num

tau2range = dict(tau2range)

print 'last num =', num

def make_templates(out_fn):
    from base import ROOT, make_h

    num2npass = {}

    f = ROOT.TFile(out_fn, 'recreate')
    hs = []

    for num in reversed(num2name.keys()):
        name = num2name[num]
        fn = name2fn[name]
        print fn

        h = make_h(fn, 'sig%i' % num)
        hs.append(h)
        h.SetDirectory(f)

        num2npass[num] = int(h.GetEntries())

    f.Write()
    f.Close()

    print
    print 'num2npass = %r' % num2npass

if __name__ == '__main__':
    if 'make' in sys.argv:
        make_templates('bigsigscan.root')
