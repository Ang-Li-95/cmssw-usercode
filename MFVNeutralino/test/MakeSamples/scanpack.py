import os, sys, base64, re, cPickle as pickle
from collections import defaultdict
from gzip import GzipFile
from itertools import product
from pprint import pprint
from modify import set_mfv_neutralino, set_gluino_ddbar

# !!! DO NOT CHANGE ANYTHING THAT CHANGES WHICH JOB IS WHICH SAMPLE ONCE BATCHES ARE RUN WITH THAT SCANPACK !!!
# unless you delete all the output from that scanpack.
# Make a new subclass and go from there. E.g. scanpackbase100epj exists to just change events_per_job going forward.
# Adding helper functions or anything that has no side effects to scanpackbase is fine.

# conventions:
# kind are one of the set_* functions from modify
# tau are float, in mm like pythia and modify
# mass are int, GeV

class scanpackbase(object):
    jobs_per_batch = 5000
    events_per_job = 200

    def __init__(self):
        self.name = self.__class__.__name__
        self.build_samples()
        self.njobs = 0
        self.job2isample = []
        for isample, (kind,tau,mass) in enumerate(self.samples):
            eps, epj = self.events_per_sample(kind,tau,mass), self.events_per_job
            assert eps >= epj and eps % epj == 0
            njobs = eps / epj

            self.njobs += njobs
            self.job2isample += [isample]*njobs
        assert self.njobs > 0

        self.jobs_in_last_batch = self.njobs % self.jobs_per_batch
        if self.jobs_in_last_batch == 0:
            self.jobs_in_last_batch = self.jobs_per_batch

        int_ceil = lambda x,y: (x+y-1)/y
        self.nbatches = int_ceil(self.njobs, self.jobs_per_batch)
        self.ibatch = 0

    def build_samples(self):
        if hasattr(self, 'samples_string'):
            details = pickle.loads(base64.b64decode(self.samples_string))
            details = sorted(details.items())
            self.samples = []
            self.__eps = {}
            for (kind_name, tau, mass), events in details:
                d = eval(kind_name), tau, mass
                self.samples.append(d)
                self.__eps[d] = events
        else:
            self.samples = list(product(self.kinds, self.taus, self.masses))

    def events_per_sample(self, kind, tau, mass):
        assert hasattr(self, 'samples_string')
        return self.__eps[(kind,tau,mass)]

    def sample(self, batch, job):
        assert 0 <= batch < self.nbatches
        assert 0 <= job < self.jobs_per_batch
        if batch == self.nbatches - 1:
            assert job < self.jobs_in_last_batch
        return self.samples[self.job2isample[batch * self.jobs_per_batch + job]]

    def sample_name(self, kind, tau, mass):
        '''Samples-style naming'''
        kind = kind.__name__
        if kind == 'set_mfv_neutralino':
            kind = 'mfv_neu'
        elif kind == 'set_gluino_ddbar':
            kind = 'mfv_ddbar'
        else:
            raise ValueError('dunno %s' % kind)
        tau = int(tau*1000)
        return '%s_tau%05ium_M%04i' % (kind, tau, mass)

    def sample_details(self, name):
        '''inverse of sample_name'''
        kind, tau, mass = name.rsplit('_',2)
        if kind == 'mfv_neu':
            kind = set_mfv_neutralino
        elif kind == 'mfv_ddbar':
            kind = set_gluino_ddbar
        else:
            raise NameError('dunno %s' % kind)
        assert tau.startswith('tau') and tau.endswith('um')
        tau = int(tau[3:].replace('um','')) / 1000.
        assert mass.startswith('M')
        mass = int(mass[1:])
        return kind, tau, mass

    def isample(self, kind, tau, mass):
        target = kind, tau, mass
        for i,x in enumerate(self.samples):
            if x == target:
                return i

    def __iter__(self):
        for self.ibatch in xrange(self.nbatches):
            yield self

    @property
    def nevents(self):
        if self.ibatch < self.nbatches - 1:
            njobs = self.jobs_per_batch
        else:
            njobs = self.jobs_in_last_batch
        return self.events_per_job * njobs

    @property
    def batch_name(self):
        return '%s_%s' % (self.name, self.ibatch)

class scanpacktest(scanpackbase):
    kinds = [set_mfv_neutralino, set_gluino_ddbar]
    taus = [tau/1000. for tau in [100,10000]]
    masses = [400, 800]

    jobs_per_batch = 50
    events_per_job = 10
    def events_per_sample(self, kind, tau, mass):
        return 100

class scanpacktest2(scanpackbase):
    kinds = [set_mfv_neutralino, set_gluino_ddbar]
    taus = [tau/1000. for tau in [300,10000]]
    masses = [600, 800]

    jobs_per_batch = 39
    def events_per_sample(self, kind, tau, mass):
        return 1000

class scanpack1(scanpackbase):
    kinds = [set_mfv_neutralino, set_gluino_ddbar]
    taus = [tau/1000. for tau in range(100, 1000, 300) + range(1000, 40000, 3000) + range(40000, 1000001, 160000)]
    masses = range(300, 600, 100) + range(600, 3001, 200)

    def events_per_sample(self, kind, tau, mass):
        return 10000

class scanpackbase100epj(scanpackbase):
    events_per_job = 100

class scanpack1_100epj(scanpack1, scanpackbase100epj): # lol
    pass

class scanpack1p5(scanpackbase100epj):
    # missing stats from scanpack1 run--don't need to run this for scanpack1_hip, there jobs almost fully completed
    samples_string = ''

class scanpack2(scanpackbase100epj):
    kinds = [set_mfv_neutralino, set_gluino_ddbar]
    taus = [tau/1000. for tau in range(100, 1000, 100) + range(1000, 4000, 1000) + range(40000, 100001, 3000)]
    masses = range(300, 600, 100) + range(600, 2601, 200)

    def events_per_sample(self, kind, tau, mass):
        return 10000

class scanpack2p5(scanpackbase100epj):
    # missing stats from scanpack2 run
    samples_string = ''

####

def get_scanpack(x):
    return {
        'scanpacktest': scanpacktest,
        'scanpacktest2': scanpacktest2,
        'scanpack1': scanpack1,
        'scanpack1_100epj': scanpack1_100epj,
        'scanpack1p5': scanpack1p5,
        'scanpack2': scanpack2,
        'scanpack2p5': scanpack2p5,
        }[x]()

def do_scanpack(process, x, batch, job):
    sp = get_scanpack(x)
    set_kind, tau, mass = sp.sample(batch, job)
    print 'do_scanpack: %s nbatches %s njobs %s lastjobs %s batch %s job %s kind %s tau %s mass %s' % (x, sp.nbatches, sp.njobs, sp.jobs_in_last_batch, batch, job, set_kind.__name__, tau, mass)
    set_kind(process, tau, mass)

def export_scanpack(crab_dirs):
    from JMTucker.Tools.CRAB3ToolsSh import crab_hadd_files as crab_files

    sample_files = defaultdict(list)

    for wd in crab_dirs:
        bwd = os.path.basename(wd)
        bwd = bwd.replace('crab_', '')
        scanpack, batch = bwd.rsplit('_', 1)
        batch = int(batch)
        scanpack = get_scanpack(scanpack)

        expected, files = crab_files(wd, True)
        assert expected == scanpack.jobs_per_batch or expected == scanpack.jobs_in_last_batch

        for fn in files:
            bn = os.path.basename(fn)
            if not bn.startswith('minitree'):
                continue

            job = int(bn.rsplit('_',1)[-1].replace('.root', '')) - 1
            kind, tau, mass = scanpack.sample(batch, job)
            sample_name = scanpack.sample_name(kind, tau, mass)
            sample_files[sample_name].append(str(fn))

    return dict(sample_files)

def read_scanpack_list(fn):
    if fn.endswith('.gz'):
        f = GzipFile(fn)
    else:
        f = open(fn)
    return eval(f.read())

def hadd_scanpack(lst_fn):
    from JMTucker.Tools import colors, eos
    from JMTucker.Tools.hadd import hadd

    lst = read_scanpack_list(lst_fn)
    new_lst = {}
    hadds = []
    for name, fns in lst.iteritems():
        fns = [str(s) for s in fns]
        out_fn = None
        for fn in fns:
            sfn = fn.split('/')
            assert re.match(r'\d{4}', sfn[-2])
            assert re.match(r'\d{6}_\d{6}', sfn[-3])
            new_out_fn = '/'.join(sfn[:-2]) + '/' + name + '.root'
            if out_fn is None:
                out_fn = new_out_fn
            else:
                assert new_out_fn == out_fn

        new_lst[name] = [out_fn]
        if eos.exists(out_fn):
            print colors.yellow('%s already exists' % out_fn)
        else:
            hadd(out_fn, fns)

    print '\nnew list:'
    pprint(new_lst)

def merge_scanpack_lists(fns):
    lsts = [read_scanpack_list(fn) for fn in fns]
    lst = lsts.pop(0)
    for l in lsts:
        for k in l:
            if lst.has_key(k):
                assert not (set(lst[k]) & set(l[k]))
                lst[k].extend(l[k])
            else:
                lst[k] = l[k]
    return lst

if __name__ == '__main__' and len(sys.argv) > 1:
    cmd = sys.argv[1]

    if cmd == 'export':
        from JMTucker.Tools.CRAB3ToolsSh import crab_dirs_from_argv
        pprint(export_scanpack(crab_dirs_from_argv()))

    elif cmd == 'read':
        x = read_scanpack_list(sys.argv[2])
        for k in sorted(x):
            print k
            for fn in sorted(x[k]):
                print fn

    elif cmd == 'hadd':
        hadd_scanpack(sys.argv[2])

    elif cmd == 'merge':
        x = merge_scanpack_lists(sys.argv[2:])
        pprint(x)

    elif cmd == 'missing':
        fn = sys.argv[2]
        lst = eval(open(fn).read())
        if len(sys.argv) >= 4:
            scanpack = sys.argv[3]
        else:
            scanpack = os.path.basename(fn).replace('.list', '')
        scanpack = get_scanpack(scanpack)
        todo = {}

        for kind, tau, mass in scanpack.samples:
            name = scanpack.sample_name(kind, tau, mass)
            files = lst.get(name, [])
            nevents = scanpack.events_per_job * len(files)
            expected = scanpack.events_per_sample(kind, tau, mass)
            if not files:
                print 'empty', name
            elif expected > nevents:
                missing = todo[(kind.__name__,tau,mass)] = expected - nevents
                print 'incomplete', name, nevents, expected, missing
            elif expected == nevents:
                print 'done', name, expected
            else:
                assert 0

        pprint(todo)
        ps = pickle.dumps(todo, -1)
        print repr(base64.b64encode(ps))

    elif cmd == 'test':
        from gensim import process
        for batch in 0,1: #,2,3: #,4
            for job in xrange(5000):
                print batch, job,
                do_scanpack(process, 'scanpack2p5', batch, job)
